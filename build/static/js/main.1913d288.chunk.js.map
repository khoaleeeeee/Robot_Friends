{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","flipOnHover","flipOnClick","flipDirection","className","style","backgroundColor","alt","src","fontSize","CardList","robots","CardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflow","height","children","App","onSearchChange","event","setState","target","value","state","document","title","fetch","response","json","users","filterdRobot","this","filter","robot","toLowerCase","includes","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2DCwBCQ,EA5BF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,eAAC,IAAD,CACEC,aAAa,EACbC,aAAa,EACbC,cAAc,aACdC,UAAY,aAJd,UAMA,cAAC,YAAD,CACEC,MAAO,CAACC,gBAAiB,aACzBF,UAAY,8BAFd,SAGE,gCACE,qBAAKG,IAAI,SAASC,IAAG,+BAA0BR,EAA1B,mBACrB,gCACE,oBAAIK,MAAO,CAACI,SAAU,QAAtB,SAAgCX,IAChC,4BAAIC,YAKV,cAAC,WAAD,CAAUM,MAAO,CAACC,gBAAiB,mBCHxBI,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OACA,cAAC,EAAD,CAEAf,GAAIW,EAAOI,GAAGf,GACdF,KAAMa,EAAOI,GAAGjB,KAChBC,MAAOY,EAAOI,GAAGhB,OAHZgB,MAMP,OACE,8BACGH,KCAQI,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKd,UAAU,MAAf,SACE,uBACEA,UAAY,uCACZe,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,EARA,SAACC,GACd,OACE,qBAAKlB,MAAQ,CAACmB,SAAU,SAAUC,OAAQ,SAA1C,SACGF,EAAMG,YC6CEC,G,wDAzCb,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACb,YAAaY,EAAME,OAAOC,SAfvC,EAAKC,MAAQ,CACbtB,OAAQ,GACRM,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBiB,SAASC,MAAQ,gBAEjBC,MAAM,8CACL7C,MAAK,SAAA8C,GAAQ,OAAIA,EAASC,UAC1B/C,MAAK,SAAAgD,GAAU,EAAKT,SAAU,CAACnB,OAAQ4B,S,oBAO1C,WAAS,IAAD,OACAC,EAAeC,KAAKR,MAAMtB,OAAO+B,QAAO,SAAAC,GAC5C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKZ,MAAMhB,YAAY2B,kBAElE,OAAIH,KAAKR,MAAMtB,OAKX,sBAAKP,UAAU,KAAf,UACE,+CACA,cAAC,EAAD,CAAWc,aAAeuB,KAAKb,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,OAAQ6B,SARjB,oBAAIpC,UAAU,KAAd,4B,GA1BK0C,cCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1B9D,M","file":"static/js/main.1913d288.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <Flippy\n      flipOnHover={true}\n      flipOnClick={false}\n      flipDirection=\"verizontal\"\n      className = 'tc dib pa3'\n    >\n    <FrontSide\n      style={{backgroundColor: \"lightblue\"}}\n      className = 'tc dib br3 pa3 ma2 grow bw2'>\n      <div>\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n        <div>\n          <h3 style={{fontSize: \"16px\"}}>{name}</h3>\n          <p>{email}</p>\n        </div>\n      </div>\n    </FrontSide>\n\n    <BackSide style={{backgroundColor: \"lightblue\"}}>\n    </BackSide>\n\n    </Flippy>\n\n  );\n}\n\nexport default Card;\n\n// className = 'tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  const CardComponent = robots.map((user, i) => {\n    return (\n    <Card\n    key={i}\n    id={robots[i].id}\n    name={robots[i].name}\n    email={robots[i].email}/>\n  );\n  });\n  return (\n    <div>\n      {CardComponent}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className = 'pa3 ba b--black bg-lightest-blue br3'\n        type='search'\n        placeholder='Search Robots'\n        onChange={searchChange}\n        />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style= {{overflow: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n      super();\n      this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    document.title = 'Robot Friends';\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => {this.setState( {robots: users} )})\n  }\n\n  onSearchChange = (event) =>{\n    this.setState({searchfield: event.target.value})\n  }\n\n  render(){\n    const filterdRobot = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    if(!this.state.robots){\n      return <h1 className='tc'>Loading...</h1>\n    }\n    else{\n      return (\n        <div className='tc'>\n          <h1>Robot Friends</h1>\n          <SearchBox searchChange= {this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filterdRobot} />\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}